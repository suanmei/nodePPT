<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>移动端适配方案 - By 李宇</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.dark.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><hgroup>
<h1>移动端适配方案</h1>

</hgroup><article>

<p><a href="https://suanmei.github.io"><i class="fa fa-github" aria-hidden="true"></i></a>
<a href="https://www.zhihu.com/people/li-ruo-yu-34/activities" class="font-set">知乎</a></p>
<style>
.font-set {
  font-size: 20px;
}
.iphone-img {

    width: 400px;
    height: 280px;
}
.viewport-img {
    width: 450px;
    height: 300px;
}
</style>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>前言</h1>
<ul class="rollIn">
<li><p>什么是<strong>适配</strong>？</p>
<ul class="rollIn">
<li>我们拿到设计师的图之后，需要根据设计图让页面在各种手机上<strong>良好得</strong>呈现出来，这个过程叫做<strong>适配</strong></li>
</ul>
</li>
<li><p><strong>适配对象</strong>是什么？</p>
<ul class="rollIn">
<li>不同<strong>屏幕尺寸</strong>的手机</li>
<li>不同<strong>分辨率</strong>的手机</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>一.背景</h1>
<ul class="rollIn">
<li><p>如今主流手机屏幕的像素点数已经远远超过了桌面显示器的像素数量，5.5英寸1920x1080P的手机与一个21英寸1920x1080P的显示器相比，同等面积下，手机的像素点更密集，可想而知，在手机屏幕上一个像素点是非常小的。</p>
</li>
<li><p>那么在CSS中设置<code>font-size:12px</code>，如果“手机屏幕物理像素：CSS像素”=“1：1”，那么PC上正常展示出来的文字在手机上你可能需要放大镜才能看清，但为什么如今的手机屏幕依然能清晰的显示？</p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>二.基本概念</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>1.像素(Pixel)</h2>
<ul class="rollIn">
<li><p>中文全称 <strong>图像元素</strong> 。每个像素通常被视为图像的最小的完整 <strong>取样</strong> ，这里的图像包括显示器显示出的图片或应用程序画面、打印机输出的画面、投影仪投射的画面。</p>
</li>
<li><p>每个图像的 <strong>像素</strong> 通常对应于二维空间中一个特定的‘<strong>位置</strong>’，并且有一个或多个与那个点有关的采样值组成数值，它描述的是图像在某一点的 <strong>颜色值</strong> 。所以 <strong>像素</strong> 是抽象的，它也没有一个固定的宽高。</p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>2.物理像素(PX)</h2>
<ul class="rollIn">
<li>又称<strong>设备像素</strong>。显示屏就是由一个个物理像素点组成的，通过控制每个像素点的颜色，使屏幕显示出不同的图像。它是显示设备中一个最微小的物理部件，每个像素可以根据操作系统设置自己的颜色和亮度。</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>3.分辨率</h2>
<ul class="rollIn">
<li><p><strong>分辨率</strong> 泛指显示系统对细节的分辨能力。能显示图像都能叫显示系统，比如显示器，投影仪，照片。</p>
</li>
<li><p><strong>分辨率</strong> 常用的单位有：<strong>dpi</strong>（点每英寸）、<strong>lpi</strong>（线每英寸）和 <strong>ppi</strong>（像素每英寸）。从单位来看，分辨率是一个比值，与物理单位的比值。</p>
</li>
<li><p>另外，<strong>ppi</strong> 和 <strong>dpi</strong> 经常都会出现混用现象。但是他们所用的领域也存在区别。从技术角度说，“像素”只存在于电脑显示领域，而“点”只出现于打印或印刷领域。</p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li><p>日常所说的“这张图片的尺寸（或分辨率）是100x100像素”，一般都是在描述数字图片，这样的描述只是说明了图片文件包含多少个像素，或者在数字系统中的尺寸。比如图1中的七张图，我们习惯于说，第1张图的分辨率是1x1像素，第4张图的分辨率是10x10像素，其实只是说明了图片的像素数而已。</p>
</li>
<li><img src="./img/picture_pixel.png" alt="不同解像度的图像的差别" title="不同解像度的图像的差别">
</li>
</ul>

</article></section></slide>
<slide class="slide"   data-on-build="Slide.magic" data-on-enter="Slide.magic.init"><section class="slide-wrapper"><div class="magic"><div class="magicItem current pagedown"  data-transition="newspaper"><article>
<div class="magic-wrapper">
<hgroup>
<h2>像素密度（PPI）</h2>

</hgroup><article>

<ul>
<li><strong>PPI</strong> 全称是 pixel per inch，就是每英寸内有多少个像素点，当用在手机屏幕上的时候，这个像素点指的是设备像素点（物理像素）。
$$ PPI = {\sqrt{横向^2(Pixel) + 纵向^2(Pixel)} \over 屏幕尺寸(inch)} $$</li>
</ul>

</article>
</div>
</article></div>
<div class="magicItem next pagedown"  data-transition="newspaper"><article>
<div class="magic-wrapper">
<article>
<img src="./img/PPI-iphone.png" alt="iphone各型号分辨率" title="iphone各型号分辨率">
<p><a href="http://screensiz.es/" target="_blank">【点我】查看主流手机分辨率</a></p>

</article>
</div>
</article></div></div></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>4.CSS像素</h2>
<ul>
<li><p><strong>CSS像素</strong> 是Web编程的概念，指的是 <strong>CSS</strong> 样式代码中使用的逻辑像素。</p>
</li>
<li><p>按照 <strong>CSS</strong> 规范的定义，<strong>CSS</strong> 中的 <strong>px</strong> 是一个相对长度，它相对的，是viewing device的分辨率。</p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>5.设备独立像素(DIP)</h2>
<blockquote>
<p>又称<strong>密度无关像素</strong>，在定义 UI 布局时应使用的虚拟像素单位，用于以密度无关方式表示布局维度 或位置。<br><strong>设备独立像素</strong>等于 160 ppi 屏幕上的一个物理像素。在运行时，系统 根据使用中屏幕的实际密度按需要以透明方式处理 dp 单位的任何缩放 。dp 单位转换为屏幕像素很简单： px = dp * (ppi / 160)。 例如，在 240 ppi 屏幕上，1 dp 等于 1.5 物理像素。在定义应用的 UI 时应始终使用 dp 单位 ，以确保在不同密度的屏幕上正常显示 UI。</p>
</blockquote>
<ul class="rollIn">
<li>DIP的概念是安卓提出来的，上面也是引用的安卓官方文档的定义，里面提及的<em>应用的 UI 应使用 dp 单位</em> 是指<strong>安卓开发时</strong>使用的长度单位应是 dp 。</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>6.设备像素比(DPR)</h2>
<ul class="rollIn">
<li><p><strong>设备像素比</strong>定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到:     </p>
<blockquote>
<p>设备像素比 = 设备像素 / 设备独立像素</p>
</blockquote>
</li>
<li>$$ dpr = {PX \over DIP} $$</li>
<li>dpr 可以通过 <code>window.devicePixelRatio</code> 来获取</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>思考<i class="fa fa-exclamation-triangle"></i></h2>
<p><p class="text-left">通过前面的几个概念我们得到了这样两个公式：</p>
$$ dpr = {PX \over DIP} $$
$$ PX = {DIP \cdot {PPI \over 160}} $$</p>
<p><p class="text-left">我们可以通过他们导出这么一个公式:</p>
$$ dpr = {PPI \over 160} $$</p>
<ul class="rollIn">
<li>这是 <strong>android</strong> ，那 ios 呢？</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>7.Retina工作原理</h2>
<ul class="rollIn">
<li><p>What&#39;s <strong>Retina</strong> ?</p>
<ul>
<li>是一种显示技术，可以将把更多的像素点压缩至一块屏幕里，从而达到更高的分辨率并提高屏幕显示的细腻程度，这种分辨率在正常观看距离下足以使人肉眼无法分辨其中的单独像素。</li>
</ul>
</li>
<li><p><img src="./img/iPhone_3GS.jpg" class="iphone-img" title="iPhone 3GS">
<img src="./img/iPhone_4.jpg" class="iphone-img" title="iPhone 4"></p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li>How does <strong>Retina</strong> work ?<ul class="rollIn">
<li>以 <strong>第三代 MacBook Pro with Retina Display</strong> 为例，工作时显卡渲染出的 <code>2880x1880</code> 个像素每四个一组，输出原来屏幕的一个像素显示的大小区域内的图像。这样一来，用户所看到的图标与文字的大小与原来的 <code>1440x900</code> 分辨率显示屏相同，但精细度是原来的 <code>4</code> 倍。但对于特殊元素，如视频与图像，则以一个图片像素对应一个屏幕像素的方式显示。</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>思考<i class="fa fa-exclamation-triangle"></i></h2>
<ul>
<li><p>在windows中，我们调整了显示分辨率，比如从 800 * 600 调整到 1024 * 768 时，屏幕的文字图标会变小，为什么 mac 的不会？</p>
</li>
<li><p class="rollIn">答案：<span class="red3"> HiDPI <span class="red3"> </p>
</li>
<li><p class="rollIn"><span><img src="./img/HiDIP.jpg" alt="&quot;文&quot;第一笔的渲染效果对比" title="&quot;文&quot;第一笔的渲染效果对比"> <span></p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>思考<i class="fa fa-exclamation-triangle"></i></h2>
<ul>
<li><p>为什么 iphone6 Plus dpr 为 <code>3 != 1080/414</code>？</p>
</li>
<li><p class="rollIn"><span><img src="./img/iphone6plus_compare.jpg" alt="对比图" title="对比图"> <span></p>
</li>
<li><p class="rollIn"><span>b方案：iPhone 6 Plus的逻辑pt分辨率比 iPhone 6 的低，显示内容会少 <span></p>
</li>
<li><p class="rollIn"><span>c方案：所有 iOS UI 元素尺寸在屏幕上的实际物理面积一下子会变小   <span></p>
</li>
<li><p class="rollIn"><span>a方案：苹果遇到了一些问题难以实现它。  <span></p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>三.viewport</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>1.视觉视窗</h2>
<ul class="rollIn">
<li><p>所谓的 <strong>视觉视窗</strong> 说白了就是设备的 <strong>屏幕区域</strong> ，换句话说就是用户通过屏幕所看到的页面内容。但它所对应的并不是指屏幕区域里的物理像素，而是CSS 像素。并且它所包含的 CSS 像素的数量也是随着用户缩放而有所改变。</p>
</li>
<li><img src="./img/meta-viewport-usage-1.jpg" class="viewport-img" title="视觉视窗">
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>2.布局视窗</h2>
<ul class="rollIn">
<li><p><strong>布局视窗</strong> 通常比设备屏幕宽得多，一般为980px，但也不是唯一，在不同的浏览器中也会有所不同如：在Safari iPhone中布局视窗的宽为980px，在Opera中布局视窗宽为850px ，在Android WebKit 中视窗宽为800px，而在万恶的IE中布局视窗宽为974px。说了一堆，这个而已视频到底是个什么玩意呢？我们来看一个图我想你就应该明白了。</p>
</li>
<li><img src="./img/meta-viewport-usage-2.jpg" class="viewport-img" title="布局视窗">
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>3.关于viewport我们聊点啥</h2>
<ul class="rollIn">
<li><strong>布局视窗</strong> 就是我们的页面，<strong>视觉视窗</strong> 就是我们的手机屏幕。</li>
<li>类比一下，<strong>布局视窗</strong> 就是墙上的一个洞，<strong>布局视窗</strong> 就是一张很大的报纸，我们需要透过这个洞看报纸。</li>
<li>手机默认做了一件事，就是把报纸拿的很远，这样我们正好能够一眼看见整张报纸（相当于缩放）。</li>
<li>但是这样会带来一个问题，字太小了，看不清楚，我们就需要把报纸凑近（放大），每次透过洞看报纸的一部分，要想看完整张报纸，就需要来回移动报纸（手指滑动页面）。</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul class="rollIn">
<li>如何设置才能让页面按照最佳方式展示以便查看？</li>
<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;&gt;</code></li>
<li><a href="https://andreasbovens.github.io/understanding-viewport/" target="_blank">针对 <em>viewport</em> 各属性的 demo（掏出手机一起搞事情）</a></li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>四.适配方案</h1>

</article></section></slide>
<slide class="slide"   data-on-build="Slide.magic" data-on-enter="Slide.magic.init"><section class="slide-wrapper"><div class="magic"><div class="magicItem current pagedown"  data-transition="horizontal"><article>
<div class="magic-wrapper">
<article>
<h2>1.高度固定，宽度自适应</h2>
<ul>
<li>这种方法关键在于容器元素高度使用定值，宽度去伸缩变换。容器元素内关键元素高宽和位置都不变。</li>
<li>偶尔配合一下媒体查询。</li>
<li>CSS单位使用 <strong>px</strong> 。</li>
</ul>

</article>
</div>
</article></div>
<div class="magicItem next pagedown"  data-transition="horizontal"><article>
<div class="magic-wrapper">
<article>
<img src="./img/lagou_iphone4.jpeg" class="lagou-img" title="拉钩在iphone4下" width="213px" height="367px">
<p>iPhone4下</p>
</article>
</div>
</article></div>
<div class="magicItem far-next pagedown"  data-transition="horizontal"><article>
<div class="magic-wrapper">
<article>
<img src="./img/lagou_iphone6.jpeg" class="lagou-img" title="拉钩在iphone6下" width="251px" height="497px">
<p>iPhone6下</p>
</article>
</div>
</article></div>
<div class="magicItem "  data-transition="horizontal"><article>
<div class="magic-wrapper">
<article>
<img src="./img/lagou_ipad.jpeg" class="lagou-img" title="拉钩在ipad下" width="490px" height="520px">
<p>iPad下</p>
</article>
</div>
</article></div></div></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li>对于这类app，记住一个开发原则就好：<strong>文字流式</strong>，<strong>控件弹性</strong>，<strong>图片等比缩放</strong>。以图描述：</li>
</ul>
<img src="./img/lagou_dev.png" class="lagou-img" title="开发原则">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li>优点：<ul>
<li>原理简单</li>
</ul>
</li>
<li>缺点：<ul>
<li>对于小屏幕有时需要进行特殊处理</li>
<li>应对复杂的页面稍显乏力</li>
<li>不同屏幕去看各元素比例不一致</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"   data-on-build="Slide.magic" data-on-enter="Slide.magic.init"><section class="slide-wrapper"><div class="magic"><div class="magicItem current pagedown"  data-transition="horizontal"><article>
<div class="magic-wrapper">
<article>
<h2>2.固定宽度，viewport缩放</h2>
<ul>
<li><p>设计图、页面宽度、viewport width使用一个宽度，浏览器帮我们完成缩放。单位使用 <strong>px</strong> 。</p>
</li>
<li><p>实现方式：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=640, user-scalable=no, target-densitydpi=device-dpi&quot;&gt;</code></p>
</li>
<li>利用 <code>@media only screen and (-webkit-min-device-pixel-ratio: 3)</code> 加载不同分辨率图片</li>
</ul>

</article>
</div>
</article></div>
<div class="magicItem next pagedown"  data-transition="horizontal"><article>
<div class="magic-wrapper">
<article>
<img src="./img/lizhi-4.jpeg" class="lizhi-img" title="荔枝在iphone4下" width="211px" height="368px">
<p>iPhone4下</p>
</article>
</div>
</article></div>
<div class="magicItem far-next pagedown"  data-transition="horizontal"><article>
<div class="magic-wrapper">
<article>
<img src="./img/lizhi-6.jpeg" class="lizhi-img" title="荔枝在iphone6下" width="249px" height="491px">
<p>iPhone6下</p>
</article>
</div>
</article></div>
<div class="magicItem "  data-transition="horizontal"><article>
<div class="magic-wrapper">
<article>
<img src="./img/lizhi-6p.jpeg" class="lizhi-img" title="荔枝在ipad下" width="267px" height="520px">
<p> iPhone6 Plus下</p>
</article>
</div>
</article></div></div></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li>优点：<ul>
<li>1:1 还原设计稿</li>
<li>各种屏幕显示一致</li>
<li>根据不同屏幕加载不同图片</li>
</ul>
</li>
<li>缺点：<ul>
<li>1px border 问题</li>
<li>字体渲染出来不够细致</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>3.rem做宽度，viewport缩放</h2>
<ul>
<li><p>这也是 <a href="https://m.taobao.com/#index" target="_blank">淘宝</a> 使用的方案，根据屏幕宽度设定 <strong>rem</strong> 值，需要适配的元素都使用 <strong>rem</strong> 为单位，不需要适配的元素还是使用 <strong>px</strong> 为单位。</p>
</li>
<li><p>实现方式：<a href="https://github.com/amfe/lib-flexible/blob/master/src/flexible.js" target="_blank">https://github.com/amfe/lib-flexible/blob/master/src/flexible.js</a></p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h3>px与rem转换</h3>
<pre><code class="javascript">
$rem-baseline: 75px !default;
@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == ""{
        $value: $value * 1px;
    }
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / ($rem-baseline / 1rem), $separator);
    } @else if type-of($value) == "list" {
      $result: append($result, rem-convert($to, $value...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return $result;
}
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h3>px与rem转换</h3>
<pre><code class="javascript">
@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h3>字体</h3>
<ul>
<li>一般来说，设计师会这样要求：<span class="red">任何手机屏幕上字体大小都要统一</span>。所以我们针对不同的 <strong>dpr</strong>，会做如下处理:<pre><code class="javascript">
@mixin font-dpr($font-size) {
  font-size: $font-size / 2;
  [data-dpr="2"] & {
      font-size: $font-size;
  }
  [data-dpr="3"] & {
      font-size: $font-size * 1.5;
  }
}
</code></pre></li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h3>border 1px 问题</h3>
<p>对于 <code>1px</code> 的元素我们一般不会去进行 px 到 rem 的转换，那我们设置 <code>border: 1px</code> ，设计师们还是不满意，为什么呢？</p>
<img src="./img/line_rendering.jpg">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li><p>所以，设计师想要的 <strong>retina</strong> 下 <code>border: 1px;</code>，其实就是 <strong>1物理像素</strong> 宽，对于 css 而言，可以认为是 <code>border: 0.5px;</code>，这是 <strong>retina</strong> 下(dpr=2下)能显示的最小单位。</p>
</li>
<li><p>而我们的第三个方案对整个页面会进行相应的缩放，正好实现了 <code>1px</code> 到 <code>1物理像素</code> 的展示。</p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>五.方案落地实施</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>使用画笔</h2>
<h3>使用画笔做标记哦~你也可以随便作画啊！</h3>

</hgroup><article>

<p>按下键盘【P】键：按下鼠标左键，在此处乱花下看看效果。</p>
<p>按下键盘【B/Y/R/G/M】：更换颜色，按下【1~4】：更换粗细</p>
<p>按下键盘【C】键：清空画板</p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>宽度不够？？</h2>

</hgroup><article>

<p>按下键盘【W】键，切换到更宽的页面看效果，第二次按键返回</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:center">less</th>
<th style="text-align:right">sass</th>
<th>stylus</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">环境</td>
<td style="text-align:center">js/nodejs</td>
<td style="text-align:right">Ruby(这列右对齐)</td>
<td class="highlight">nodejs(高亮)</td>
</tr>
<tr>
<td style="text-align:left">扩展名</td>
<td style="text-align:center">.less</td>
<td style="text-align:right">.sass/.scss</td>
<td>.styl</td>
</tr>
<tr>
<td style="text-align:left">特点</td>
<td style="text-align:center">老牌，用户多，支持js解析</td>
<td style="text-align:right">功能全，有成型框架，发展快</td>
<td>语法多样，小众</td>
</tr>
<tr>
<td style="text-align:left">案例/框架</td>
<td style="text-align:center"><a href="http://getbootstrap.com/" target="_blank">Bootstrap</a></td>
<td style="text-align:right"><a href="http://compass-style.org" target="_blank">compass</a> <a href="http://bourbon.io" target="_blank">bourbon</a></td>
<td></td>
</tr>
</tbody>
</table>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>使用overview模式</h2>

</hgroup><article>

<p>按下键盘【O】键。看下效果。</p>
<p>在overview模式下，方向键下一页，【enter】键进入选中页</p>
<p>或者按下键盘【O】键，退出overview模式</p>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'slide',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
<script src="./js/demo.js"></script>
<link rel="stylesheet" href="./css/demo.css">
<script src="./js/zoom.js"></script>

<!-- MathJax -->
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
  config: ["TeX-AMS-MML_HTMLorMML.js"],
  tex2jax: {inlineMath: [['\\(','\\)']]}});
  //['$','$'], 避免货币价格冲突
</script>
<script type="text/javascript" src="./js/mathjax/MathJax.js"></script>

<!--placeholder-->
</body>
</html>
